swagger: "2.0"
info:
  description: "API details for Hospital Managment System (HMS)"
  version: "1.0.0"
  title: "Swagger for HMS"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "chandra@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v1"
tags:
- name: "profile"
  description: "Login user details"
- name: "registration"
  description: "To register new users (patient, doctor, admin)"
- name: "booking"
  description: "For new booking"
- name: "contact"
  description: "Access to contact details"
- name: "healthCheck"
  description: "health of the system"
schemes:
- "https"
- "http"
paths:
  /profile:
    post:
      tags:
        - "profile"
      summary: "add new profile - DELETE THIS API"
      operationId: "addNewProfile"
      parameters:
      - in: "body"
        name: "body"
        description: "add new profile"
        required: true
        schema:
          $ref: "#/definitions/profile"
      responses:
        200:
          description: OK
  
  
  /profile/{Id}:
    put:
      tags:
        - "profile"
      summary: "update profile - DELETE THIS API"
      description: "update profile details"
      operationId: "updateProfile"
      parameters:
      - in: "path"
        name: "Id"
        type: "number"
        description: "profile id to update"
        required: true
      - in: "body"
        name: "body"
        description: "update profile details"
        required: true
        schema:
          $ref: "#/definitions/profile"
      responses:
        200:
          description: OK
  
  /authenticate:
    post:
      tags:
      - "profile"
      summary: "validate the user"
      description: "validation"
      operationId: "authenticateUser"
      parameters:
      - in: "body"
        name: "profile"
        description: "profile information"
        required: true
        schema:
          $ref: "#/definitions/profile"
      responses:
        200:
          description: OK  
          
  /registration:
    post:
      tags:
      - "registration"
      summary: "register the new user"
      description: "register the new user"
      operationId: "AddNewRegistration"
      parameters:
      - in: "body"
        name: "body"
        description: "create user object"
        required: true
        schema:
          $ref: "#/definitions/registration"
      responses:
        200:
          description: OK
    put:
      tags:
      - "registration"
      summary: "update registration details"
      description: "update registration details"
      operationId: "UpdateRegistrationDetails"
      parameters:
      - in: "body"
        name: "registration"
        description: "registation id to update"
        required: true
        schema:
          $ref: "#/definitions/registration"
      responses:
        200:
          description: OK
          
  /registration/{Id}:
    get:
      tags:
      - "registration"
      summary: "Find registration details for the given regId"
      description: "Returns a registration details"
      operationId: "getRegistrationDetails"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "Id"
        description: "get registration details for given registration Id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/registration"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "registration not found"
    delete:
      tags:
      - "registration"
      summary: "delete registered profile"
      description: "to delete booking"
      operationId: "deleteProfile"
      parameters:
      - in: "path"
        name: "Id"
        type: "number"
        description: "delete profile"
        required: true
      responses:
        200:
         description: OK  

  
  /registration/role/{Id}:
    get:
      tags:
      - "registration"
      summary: "Find registration details for the given roleId"
      description: "Returns a list of registration details"
      operationId: "getAllRegistrationDetailsByRole"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "Id"
        description: "pass role details like Admin, Patient, Doctor"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/registration"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "registration not found"
  
  /registration/email/{Id}:
    get:
      tags:
      - "registration"
      summary: "Find registration details for the given email id"
      description: "Returns a registration details"
      operationId: "getSpecificRegistraionDetailsByEmail"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "Id"
        description: "pass email id"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/registration"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "registration not found"
          
  /registration/specialization/{specialization}:
    get:
      tags:
      - "registration"
      summary: "Find registration details for the given email id"
      description: "Returns list of specialization profile details"
      operationId: "getSpecializationList"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "specialization"
        description: "pass specialization string"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/registration"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "registration not found"
          
  /booking:
    post:
      tags:
      - "booking"
      summary: "new booking" 
      description: "book an new appointment"
      operationId: "CreateNewBooking"
      parameters:
      - in: "body"
        name: "body"
        description: "new booking"
        required: true
        schema:
          $ref: "#/definitions/booking"
      responses:
        200:
          description: OK
          
  /booking/date/{bookingDate}/doctorId/{doctorId}:
    get:
      tags:
      - "booking"
      summary: "Find booking details by passing bookingId"
      description: "Returns booking details"
      operationId: "getBookingDetailsByDoctorIdAndDate"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "bookingDate"
        description: "bookingDate"
        required: true
        type: "string"
      - in: "path"
        name: "doctorId"
        description: "doctorId"
        required: true
        type: "string"  
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/booking"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "booking details not found"  
          
  /booking/{Id}:
    delete:
      tags:
      - "booking"
      summary: "delete booking"
      description: "to delete booking"
      operationId: "deleteBooking"
      parameters:
      - in: "path"
        name: "Id"
        type: "number"
        description: "cancel booking"
        required: true
      responses:
        200:
          description: OK
    get:
      tags:
      - "booking"
      summary: "Find booking details by passing bookingId"
      description: "Returns booking details"
      operationId: "getBookingSummaryDetails"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "Id"
        description: "bookingId"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/booking"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "booking details not found"  
    put:
      tags:
      - "booking"
      summary: "update booking details"
      description: "update booking details"
      operationId: "updateBookingDetails"
      parameters:
      - in: "path"
        name: "Id"
        type: "number"
        description: "booking id to update"
        required: true
      - in: "body"
        name: "body"
        description: "update booking details"
        required: true
        schema:
          $ref: "#/definitions/booking"
      responses:
        200:
          description: OK     
          
  /booking/date/{bookedDate}:
    get:
      tags:
      - "booking"
      summary: "Find booking details for specified date"
      description: "Returns booking details"
      operationId: "getAppointmentDetailsByDate"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "bookedDate"
        description: "specified date"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/booking"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "booking details not found"
          
  /booking/:
    get:
      tags:
      - "booking"
      summary: "getAllAppointmentDetails"
      description: "Returns booking details"
      operationId: "getAllAppointmentDetails"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/booking"
        "404":
          description: "booking details not found"  
  
  /contact/{Id}:
    put:
      tags:
        - "contact"
      summary: "update contact"
      description: "update contact details"
      operationId: "updateContact"
      parameters:
        - in: "path"
          name: "Id"
          type: "number"
          required: true
        - in: "body"
          name: "body"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/contact"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "contact details not found"
        "405":
          description: "Validation exception"
          
  /contact:
    get:
      tags:
        - "contact"
      summary: "view contacts"
      description: "get all contact details"
      operationId: "getAllContacts"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/contact"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "contact details not found"
    post:
      tags:
        - "contact"
      summary: "add new contact"
      description: "add new contact details"
      operationId: "addNewContact"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/contact"
      responses:
        200:
          description: OK
  
  /healthcheck/ping:
    get:
      tags:
      - "healthCheck"
      summary: "backend system health check"
      description: "health check"
      operationId: "ping"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/healthcheck"
        "400":
          description: "Invalid details supplied"
        "404":
          description: "backend system down"
          
definitions:
  profile:
    type: "object"
    properties:
      id:
        type: "number"
        description: "profile Id"
      email:
        type: "string"
        description: "email Id"
      password:
        type: "string"
        description: "password"
      role:
        type: "string"
        description: "type of role"
        enum: 
        - "admin"
        - "doctor"
        - "patient"
  
  registration:
    type: "object"
    properties:
      id:
        type: "number"
        description: "registration Id"
      firstName:
        type: "string"
        description: "first name"
      lastName:
        type: "string"
        description: "last name"
      sex:
        type: "string"
        description: "gender details"
        enum: 
        - "male"
        - "female"
        - "transgender"
      age:
        type: "integer"
        description: "age"
      email:
        type: "string"
        description: "email id"
      password:
        type: "string"
        description: "sceret password"
      address:
        type: "string"
        description: "address details"
      existingDiseases:
        type: "string"
        description: "describe existing diseases"
      qualification:
        type: "string"
        description: "qualification details"
      specialization:
        type: "string"
        description: "specialization details"
      yearOfExp:
        type: "string"
        description: "year of experience"
      role:
        type: "string"
        description: "describe role"
        enum: 
        - "admin"
        - "doctor"
        - "patient"
  
  booking:
    type: "object"
    properties:
      bookedDate:
        type: "string"
        description: "booking date"
      bookedTime:
        type: "string"
        description: "booking time"
      doctorId:
        type: "number"
        description: "doctor Id"
      doctorName:
        type: "string"
        description: "doctor name"
      treatmentType:
        type: "string"
        description: "type of treatment"
      purpose:
        type: "string"
        description: "purpose of visit"
      patientId:
        type: "number"
        description: "patient id"
      patientName:
        type: "string"
        description: "patient Name"
      isTreatmentCompleted:
        type: "string"
        description: "isTreatmentCompleted"
      prescription:
        type: "string"
        description: "prescription details"
        
  contact:
    type: "object"
    properties:
      id:
        type: "string"
        description: "contact Id"
      name:
        type: "string"
        description: "contact name"
      countryCode:
        type: "string"
        description: "country code"
      phone:
        type: "number"
        description: "phone number"
      email:
        type: "string"
        description: "email address"
      address:
        type: "string"
        description: "addresss"
      isBranch:
        type: "boolean"
        description: "is branch"
      isSubbranch:
        type: "boolean"
        description: "is sub-branch"
      isHeadOffice:
        type: "boolean"
        description: "is head office"
        
  healthcheck:
    type: "object"
    properties:
      status:
        type: "string"
        description: "status information"
    
      
  
